/**
 * Phase 32: Bilingual Prompt Templates for LLM Analyzers
 *
 * Provides context-appropriate prompts in Japanese and English
 * for better analysis accuracy across different languages.
 */

import { Language, detectLanguage } from './language-detector';

export interface PromptTemplate {
  systemMessage: string;
  userMessage: (text: string) => string;
  outputFormat: string;
}

/**
 * Japanese prompt for GeminiAnalyzer (Phase 26 enhanced)
 */
const GEMINI_ANALYZER_PROMPT_JA = (text: string) => `„ÅÇ„Å™„Åü„ÅØÊßãÈÄ†Âåñ„Éá„Éº„ÇøÊäΩÂá∫„ÅÆÂ∞ÇÈñÄÂÆ∂„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„Åã„ÇâÂõ≥Ëß£„Éá„Éº„Çø„ÇíÊäΩÂá∫„Åó„ÄÅÁâπ„Å´**„Éé„Éº„ÉâÈñì„ÅÆÈñ¢‰øÇÊÄß„ÇíÈ´òÁ≤æÂ∫¶„ÅßÊäΩÂá∫**„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

## „Çπ„ÉÜ„ÉÉ„Éó1: ÊÄùËÄÉ„Éó„É≠„Çª„ÇπÔºàÂÜÖÈÉ®Âá¶ÁêÜ„ÄÅÂá∫Âäõ‰∏çË¶ÅÔºâ
1. „ÉÜ„Ç≠„Çπ„Éà„ÅÆ‰∏ªÈ°å„Å®„É°„Ç§„É≥„ÉÜ„Éº„Éû„ÇíÁêÜËß£„Åô„Çã
2. „Ç≠„Éº„Å®„Å™„Çã„Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£ÔºàÊ¶ÇÂøµ„Éª‰∫∫Áâ©„Éª„Ç§„Éô„É≥„ÉàÔºâ„ÇíÂàóÊåô„Åô„Çã
3. „Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£Èñì„ÅÆÈñ¢‰øÇÊÄß„Éë„Çø„Éº„É≥„ÇíÁâπÂÆö„Åô„Çã:
   - Âõ†ÊûúÈñ¢‰øÇ: A‚ÜíBÔºàA„ÅåÂéüÂõ†„ÅßB„ÅåÁô∫ÁîüÔºâ
   - ÊôÇÁ≥ªÂàó: A‚ÜíBÔºàA„ÅÆ„ÅÇ„Å®„Å´B„ÅåËµ∑„Åì„ÇãÔºâ
   - ÈöéÂ±§: A‚ÜíBÔºàA„ÅåB„ÇíÂê´„ÇÄ„ÄÅA„ÅåB„ÅÆ‰∏ä‰ΩçÔºâ
   - ‰æùÂ≠ò: A‚ÜíBÔºàA„ÅåB„Å´ÂΩ±Èüø„Çí‰∏é„Åà„ÇãÔºâ
   - Â§âÊèõ: A‚ÜíBÔºàA„ÅåB„Å´Â§âÂåñ„Åô„ÇãÔºâ

## „Çπ„ÉÜ„ÉÉ„Éó2: Èñ¢‰øÇÊÄßÊäΩÂá∫„ÅÆÈáçË¶Å„É´„Éº„É´
- **ÊòéÁ§∫ÁöÑ„Å™Êé•Á∂öË™û„ÇíË¶ãÈÄÉ„Åï„Å™„ÅÑ**: „ÄåÊ¨°„Å´„Äç„Äå„Åù„ÅÆÂæå„Äç„Äå„Åã„Çâ„Äç„Äå„Å´„Çà„Çä„Äç„Äå„Å´„Çà„Å£„Å¶„Äç„Äå„ÇíÁµå„Å¶„Äç„ÄåÁµêÊûú„Å®„Åó„Å¶„Äç„Äå„Åù„ÅÆ„Åü„ÇÅ„Äç„Äå„Åó„Åü„Åå„Å£„Å¶„Äç
- **ÊöóÈªôÁöÑ„Å™Èñ¢‰øÇ„ÇÇÊé®Ë´ñ**: ÊñáËÑà„Åã„ÇâË™≠„ÅøÂèñ„Çå„ÇãÈ†ÜÂ∫è„Éª‰æùÂ≠òÈñ¢‰øÇ„ÇÇÂê´„ÇÅ„Çã
- **ÂèåÊñπÂêëÈñ¢‰øÇ**: Áõ∏‰∫í‰ΩúÁî®„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ‰∏°ÊñπÂêë„ÅÆedge„Çí‰ΩúÊàê
- **‰∏≠Èñì„Çπ„ÉÜ„ÉÉ„Éó**: A‚ÜíC „Å®„ÅÇ„ÇãÂ†¥Âêà„ÄÅA‚ÜíB‚ÜíC „ÅÆ„Çà„ÅÜ„Å™‰∏≠Èñì„Éó„É≠„Çª„Çπ„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„ÅãÊ§úË®º

## „Çπ„ÉÜ„ÉÉ„Éó3: Âá∫ÂäõÂΩ¢ÂºèÔºà„Åì„ÅÆÈÉ®ÂàÜ„ÅÆ„ÅøÂá∫ÂäõÔºâ
‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„ÅßÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàË™¨ÊòéÊñá„Éª„Ç≥„Éº„Éâ„Éñ„É≠„ÉÉ„ÇØ‰∏çË¶ÅÔºâ:

{
  "title": "„ÉÜ„Ç≠„Çπ„Éà„ÅÆ‰∏ªÈ°åÔºà30ÊñáÂ≠ó‰ª•ÂÜÖÔºâ",
  "type": "flowchart" | "mindmap" | "timeline" | "orgchart",
  "nodes": [
    {"id": "n1", "label": "„Éé„Éº„ÉâÂêçÔºà60ÊñáÂ≠ó‰ª•ÂÜÖÔºâ"},
    {"id": "n2", "label": "Âà•„ÅÆ„Éé„Éº„Éâ"}
  ],
  "edges": [
    {"from": "n1", "to": "n2", "label": "Èñ¢‰øÇÊÄß„ÅÆ„É©„Éô„É´ÔºàÁúÅÁï•ÂèØÔºâ"}
  ]
}

## Âá∫ÂäõÂà∂Á¥Ñ:
- „Éé„Éº„ÉâÊï∞: ÊúÄÂ§ß10ÂÄã
- „É©„Éô„É´: 60ÊñáÂ≠ó‰ª•ÂÜÖ
- edgesÈÖçÂàó: **ÂøÖÈ†à**ÔºàÁ©∫ÈÖçÂàó„Åß„ÇÇÂøÖ„ÅöÂê´„ÇÅ„ÇãÔºâ
- Á¥îÁ≤ã„Å™JSON„ÅÆ„ÅøÔºàMarkdown‰∏çË¶ÅÔºâ

## Èñ¢‰øÇÊÄßÊäΩÂá∫„ÅÆ‰æã:
ÂÖ•Âäõ: "Á†îÁ©∂„Å´„Çà„ÇäÊñ∞ÊäÄË°ì„ÅåÈñãÁô∫„Åï„Çå„ÄÅ„Åù„Çå„ÇíÂÆüÁî®Âåñ„Åó„Å¶Ë£ΩÂìÅÂåñ„Åô„Çã"
Âá∫Âäõedges: [
  {"from": "Á†îÁ©∂", "to": "Êñ∞ÊäÄË°ì", "label": "ÈñãÁô∫"},
  {"from": "Êñ∞ÊäÄË°ì", "to": "ÂÆüÁî®Âåñ", "label": "ÈÅ©Áî®"},
  {"from": "ÂÆüÁî®Âåñ", "to": "Ë£ΩÂìÅÂåñ", "label": "Â§âÊèõ"}
]

## ÂàÜÊûêÂØæË±°„ÉÜ„Ç≠„Çπ„Éà:
${text.slice(0, 1000)}

JSON:`;

/**
 * English prompt for GeminiAnalyzer (Phase 26 enhanced)
 */
const GEMINI_ANALYZER_PROMPT_EN = (text: string) => `You are an expert in structured data extraction. Extract diagram data from the following text, with a special focus on **accurately extracting relationships between nodes**.

## Step 1: Reasoning Process (internal processing, no output required)
1. Understand the main topic and theme of the text
2. List key entities (concepts, people, events)
3. Identify relationship patterns between entities:
   - Causal: A‚ÜíB (A causes B to occur)
   - Sequential: A‚ÜíB (B happens after A)
   - Hierarchical: A‚ÜíB (A contains B, A is above B)
   - Dependency: A‚ÜíB (A influences B)
   - Transformation: A‚ÜíB (A transforms into B)

## Step 2: Important Rules for Relationship Extraction
- **Don't miss explicit connectors**: "then", "after", "from", "by", "through", "resulting in", "therefore", "thus"
- **Infer implicit relationships**: Include order/dependencies readable from context
- **Bidirectional relationships**: Create edges in both directions for mutual interactions
- **Intermediate steps**: When A‚ÜíC exists, verify if intermediate processes like A‚ÜíB‚ÜíC exist

## Step 3: Output Format (only output this section)
Output in the following JSON format (no explanatory text or code blocks):

{
  "title": "Main topic (max 30 chars)",
  "type": "flowchart" | "mindmap" | "timeline" | "orgchart",
  "nodes": [
    {"id": "n1", "label": "Node name (max 60 chars)"},
    {"id": "n2", "label": "Another node"}
  ],
  "edges": [
    {"from": "n1", "to": "n2", "label": "Relationship label (optional)"}
  ]
}

## Output Constraints:
- Node count: Maximum 10
- Labels: Max 60 characters
- edges array: **Required** (include even if empty)
- Pure JSON only (no Markdown)

## Relationship Extraction Example:
Input: "Research develops new technology, which is then commercialized and turned into products"
Output edges: [
  {"from": "Research", "to": "New Technology", "label": "develops"},
  {"from": "New Technology", "to": "Commercialization", "label": "applied to"},
  {"from": "Commercialization", "to": "Products", "label": "transforms into"}
]

## Text to analyze:
${text.slice(0, 1000)}

JSON:`;

/**
 * Japanese prompt for ContentAnalyzer
 */
const CONTENT_ANALYZER_PROMPT_JA = (text: string) => `‰ª•‰∏ã„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíÂàÜÊûê„Åó„ÄÅÂÜÖÂÆπ„ÇíÊúÄ„ÇÇ„Çà„ÅèË°®„ÅôÂõ≥Ëß£„ÇíÁîüÊàê„Åô„Çã„Åü„ÇÅ„ÅÆJSON„Éá„Éº„Çø„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

JSON„ÅÆÂΩ¢Âºè„ÅØ {title, type, nodes, edges}„ÄÇ
- type „ÅØ 'flowchart' | 'mindmap' | 'timeline' | 'orgchart' „ÅÆ„ÅÑ„Åö„Çå„Åã
- nodes „ÅØ {id, label} „ÅÆÈÖçÂàó
- edges „ÅØ {from, to, label?} „ÅÆÈÖçÂàó

ÈáçË¶Å„Å™ÊåáÁ§∫:
1. JSON„ÅÆ„Åø„ÇíËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà„Ç≥„Éº„Éâ„Éñ„É≠„ÉÉ„ÇØ‰∏çË¶ÅÔºâ
2. **Èñ¢‰øÇÊÄß„ÇíÊ≠£Á¢∫„Å´ÊäΩÂá∫**: „ÉÜ„Ç≠„Çπ„Éà‰∏≠„ÅÆ„ÄåÊ¨°„Å´„Äç„Äå„Åù„ÅÆÂæå„Äç„Äå„Åã„Çâ„Äç„Äå„Å´„Çà„Çä„Äç„Äå„ÇíÁµå„Å¶„Äç„Äå„Åù„ÅÆ‰∏ã„Å´„Äç„Å™„Å©„ÅÆÊé•Á∂öË™û„Åã„Çâ„ÄÅ„Éé„Éº„ÉâÈñì„ÅÆ‰æùÂ≠òÈñ¢‰øÇ„Çí edges „ÅßÊ≠£Á¢∫„Å´Ë°®Áèæ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
3. **È†ÜÂ∫è„Çí‰øùÊåÅ**: ÊôÇÁ≥ªÂàó„ÇÑÊâãÈ†Ü„Åå„ÅÇ„ÇãÂ†¥Âêà„ÄÅedges „ÅßÈ†ÜÂ∫èÈñ¢‰øÇ„ÇíÂøÖ„ÅöÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ
4. **ÈöéÂ±§„ÇíË°®Áèæ**: ÁµÑÁπîÂõ≥„ÇÑÂàÜÈ°û„ÅÆÂ†¥Âêà„ÄÅ‰∏ä‰Ωç‚Üí‰∏ã‰Ωç„ÅÆÈñ¢‰øÇ„Çí edges „ÅßÊòéÁ¢∫„Å´Ë°®Áèæ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
5. „Åô„Åπ„Å¶„ÅÆÈáçË¶Å„Å™„Éé„Éº„Éâ„Å´Â∞ë„Å™„Åè„Å®„ÇÇ1„Å§„ÅÆÊé•Á∂öÔºàedgeÔºâ„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ

„ÉÜ„Ç≠„Çπ„Éà:
"${text}"`;

/**
 * English prompt for ContentAnalyzer
 */
const CONTENT_ANALYZER_PROMPT_EN = (text: string) => `Analyze the following text and create JSON data to generate a diagram that best represents the content.

JSON format: {title, type, nodes, edges}.
- type: 'flowchart' | 'mindmap' | 'timeline' | 'orgchart'
- nodes: array of {id, label}
- edges: array of {from, to, label?}

Important instructions:
1. Return JSON only (no code blocks)
2. **Extract relationships accurately**: From connectors like "then", "after", "from", "by", "through", "under" in the text, accurately represent dependencies between nodes in edges
3. **Preserve order**: For sequences or procedures, include order relationships in edges
4. **Express hierarchy**: For org charts or classifications, clearly express top‚Üídown relationships in edges
5. Create at least one connection (edge) for every important node

Text:
"${text}"`;

/**
 * Get appropriate prompt based on detected language
 */
export function getGeminiAnalyzerPrompt(text: string, preferredLanguage?: Language): string {
  const detected = preferredLanguage === 'auto' || !preferredLanguage
    ? detectLanguage(text)
    : { language: preferredLanguage, confidence: 1.0 };

  if (detected.language === 'ja') {
    console.log('üìù Using Japanese prompt for GeminiAnalyzer');
    return GEMINI_ANALYZER_PROMPT_JA(text);
  } else {
    console.log('üìù Using English prompt for GeminiAnalyzer');
    return GEMINI_ANALYZER_PROMPT_EN(text);
  }
}

/**
 * Get appropriate prompt based on detected language for ContentAnalyzer
 */
export function getContentAnalyzerPrompt(text: string, preferredLanguage?: Language): string {
  const detected = preferredLanguage === 'auto' || !preferredLanguage
    ? detectLanguage(text)
    : { language: preferredLanguage, confidence: 1.0 };

  if (detected.language === 'ja') {
    console.log('üìù Using Japanese prompt for ContentAnalyzer');
    return CONTENT_ANALYZER_PROMPT_JA(text);
  } else {
    console.log('üìù Using English prompt for ContentAnalyzer');
    return CONTENT_ANALYZER_PROMPT_EN(text);
  }
}
